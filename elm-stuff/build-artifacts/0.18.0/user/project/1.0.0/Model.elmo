var _user$project$Model$getLastDir = function (l) {
	var mc2 = A2(_user$project$Auxiliar$get, 1, l);
	var mc1 = A2(_user$project$Auxiliar$get, 0, l);
	var _p0 = mc1;
	if (_p0.ctor === 'Nothing') {
		return {ctor: '_Tuple2', _0: 0, _1: 0};
	} else {
		var _p1 = mc2;
		if (_p1.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: 0, _1: 0};
		} else {
			return {ctor: '_Tuple2', _0: _p0._0._0 - _p1._0._0, _1: _p0._0._1 - _p1._0._1};
		}
	}
};
var _user$project$Model$changePlayerDir = F2(
	function (d, p) {
		return _elm_lang$core$Native_Utils.eq(
			A2(
				_user$project$Auxiliar$addC,
				d,
				_user$project$Model$getLastDir(p.snake)),
			{ctor: '_Tuple2', _0: 0, _1: 0}) ? p : _elm_lang$core$Native_Utils.update(
			p,
			{dir: d});
	});
var _user$project$Model$changeDir = F3(
	function (model, n, d) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				players: A3(
					_user$project$Auxiliar$mapFilter,
					_user$project$Model$changePlayerDir(d),
					function (p) {
						return _elm_lang$core$Native_Utils.eq(p.id, n);
					},
					model.players)
			});
	});
var _user$project$Model$addFirst = F2(
	function (dir, l) {
		var _p2 = _elm_lang$core$List$head(l);
		if (_p2.ctor === 'Nothing') {
			return l;
		} else {
			return {
				ctor: '::',
				_0: A2(_user$project$Auxiliar$addC, _p2._0, dir),
				_1: l
			};
		}
	});
var _user$project$Model$movePlayer = F2(
	function (model, p) {
		var auxList = A2(_user$project$Model$addFirst, p.dir, p.snake);
		var mc = _elm_lang$core$List$head(auxList);
		var _p3 = mc;
		if (_p3.ctor === 'Nothing') {
			return p;
		} else {
			return _elm_lang$core$Native_Utils.eq(_p3._0, model.fruit) ? _elm_lang$core$Native_Utils.update(
				p,
				{snake: auxList}) : _elm_lang$core$Native_Utils.update(
				p,
				{
					snake: _user$project$Auxiliar$removeLast(auxList)
				});
		}
	});
var _user$project$Model$movePlayers = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			players: A2(
				_elm_lang$core$List$map,
				_user$project$Model$movePlayer(model),
				model.players)
		});
};
var _user$project$Model$getCoordinate = function (tile) {
	return {ctor: '_Tuple2', _0: tile.row, _1: tile.col};
};
var _user$project$Model$fruitTile = F2(
	function (model, tile) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Model$getCoordinate(tile),
			model.fruit);
	});
var _user$project$Model$startingPos = function (n) {
	var _p4 = n;
	switch (_p4) {
		case 1:
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 13, _1: 10},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 14, _1: 10},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 15, _1: 10},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 16, _1: 10},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 2:
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 16, _1: 15},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 15, _1: 15},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 14, _1: 15},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 13, _1: 15},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		default:
			return {ctor: '[]'};
	}
};
var _user$project$Model$_p5 = {ctor: '_Tuple2', _0: 20, _1: 20};
var _user$project$Model$rows = _user$project$Model$_p5._0;
var _user$project$Model$cols = _user$project$Model$_p5._1;
var _user$project$Model$borderTile = function (t) {
	return _elm_lang$core$Native_Utils.eq(t.col, 0) || (_elm_lang$core$Native_Utils.eq(t.col, _user$project$Model$cols - 1) || (_elm_lang$core$Native_Utils.eq(t.row, 0) || _elm_lang$core$Native_Utils.eq(t.row, _user$project$Model$rows - 1)));
};
var _user$project$Model$randomCoordinate = A2(
	_elm_lang$core$Random$pair,
	A2(_elm_lang$core$Random$int, 1, _user$project$Model$rows - 2),
	A2(_elm_lang$core$Random$int, 1, _user$project$Model$cols - 2));
var _user$project$Model$newFruitPosition = function (model) {
	newFruitPosition:
	while (true) {
		var _p6 = A2(_elm_lang$core$Random$step, _user$project$Model$randomCoordinate, model.seed);
		var rc = _p6._0;
		var newSeed = _p6._1;
		var b = A2(
			_elm_lang$core$List$any,
			function (p) {
				return A2(_elm_lang$core$List$member, rc, p.snake);
			},
			model.players);
		if (b) {
			var _v5 = _elm_lang$core$Native_Utils.update(
				model,
				{seed: newSeed});
			model = _v5;
			continue newFruitPosition;
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{seed: newSeed, fruit: rc});
		}
	}
};
var _user$project$Model$checkFruit = function (model) {
	var b = A2(
		_elm_lang$core$List$any,
		function (p) {
			return A2(_elm_lang$core$List$member, model.fruit, p.snake);
		},
		model.players);
	return b ? _user$project$Model$newFruitPosition(model) : model;
};
var _user$project$Model$GameModel = F6(
	function (a, b, c, d, e, f) {
		return {board: a, players: b, fruit: c, seed: d, state: e, cpu: f};
	});
var _user$project$Model$Player = F3(
	function (a, b, c) {
		return {id: a, snake: b, dir: c};
	});
var _user$project$Model$Tile = F3(
	function (a, b, c) {
		return {row: a, col: b, elem: c};
	});
var _user$project$Model$InGame = function (a) {
	return {ctor: 'InGame', _0: a};
};
var _user$project$Model$Menu = function (a) {
	return {ctor: 'Menu', _0: a};
};
var _user$project$Model$Finished = {ctor: 'Finished'};
var _user$project$Model$Playing = {ctor: 'Playing'};
var _user$project$Model$Collision = {ctor: 'Collision'};
var _user$project$Model$Wall = {ctor: 'Wall'};
var _user$project$Model$Fruit = {ctor: 'Fruit'};
var _user$project$Model$PlayerTail = function (a) {
	return {ctor: 'PlayerTail', _0: a};
};
var _user$project$Model$PlayerHead = function (a) {
	return {ctor: 'PlayerHead', _0: a};
};
var _user$project$Model$Empty = {ctor: 'Empty'};
var _user$project$Model$elemInTile = F2(
	function (model, tile) {
		var coor = _user$project$Model$getCoordinate(tile);
		var p = A2(
			_elm_lang$core$List$filter,
			function (p) {
				return A2(_elm_lang$core$List$member, coor, p.snake);
			},
			model.players);
		var _p7 = p;
		if (_p7.ctor === '::') {
			if (_p7._1.ctor === '[]') {
				var _p9 = _p7._0;
				var mTail = _elm_lang$core$List$tail(_p9.snake);
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Maybe$Just(coor),
					_elm_lang$core$List$head(_p9.snake))) {
					if (_user$project$Model$borderTile(tile)) {
						return _user$project$Model$Collision;
					} else {
						var _p8 = mTail;
						if (_p8.ctor === 'Nothing') {
							return _user$project$Model$Collision;
						} else {
							return A2(_elm_lang$core$List$member, coor, _p8._0) ? _user$project$Model$Collision : _user$project$Model$PlayerHead(_p9.id);
						}
					}
				} else {
					return _user$project$Model$PlayerTail(_p9.id);
				}
			} else {
				return _user$project$Model$Collision;
			}
		} else {
			return _user$project$Model$borderTile(tile) ? _user$project$Model$Wall : (A2(_user$project$Model$fruitTile, model, tile) ? _user$project$Model$Fruit : _user$project$Model$Empty);
		}
	});
var _user$project$Model$updateBoard = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			board: A2(
				_elm_lang$core$List$map,
				function (t) {
					return _elm_lang$core$Native_Utils.update(
						t,
						{
							elem: A2(_user$project$Model$elemInTile, model, t)
						});
				},
				model.board)
		});
};
var _user$project$Model$makeMove = function (model) {
	var modelAfterMove = _user$project$Model$updateBoard(
		_user$project$Model$checkFruit(
			_user$project$Model$movePlayers(model)));
	return A2(
		_elm_lang$core$List$any,
		function (t) {
			return _elm_lang$core$Native_Utils.eq(t.elem, _user$project$Model$Collision);
		},
		modelAfterMove.board) ? _elm_lang$core$Native_Utils.update(
		modelAfterMove,
		{state: _user$project$Model$Finished}) : modelAfterMove;
};
var _user$project$Model$mapNumToTile = function (n) {
	return A3(
		_user$project$Model$Tile,
		(n / _user$project$Model$cols) | 0,
		A2(_elm_lang$core$Basics_ops['%'], n, _user$project$Model$cols),
		_user$project$Model$Empty);
};
var _user$project$Model$initBoard = A2(
	_elm_lang$core$List$map,
	_user$project$Model$mapNumToTile,
	A2(_elm_lang$core$List$range, 0, (_user$project$Model$rows * _user$project$Model$cols) - 1));
var _user$project$Model$initState = F2(
	function (s, b) {
		return _user$project$Model$updateBoard(
			{
				board: _user$project$Model$initBoard,
				players: {
					ctor: '::',
					_0: A3(
						_user$project$Model$Player,
						1,
						_user$project$Model$startingPos(1),
						{ctor: '_Tuple2', _0: -1, _1: 0}),
					_1: {
						ctor: '::',
						_0: A3(
							_user$project$Model$Player,
							2,
							_user$project$Model$startingPos(2),
							{ctor: '_Tuple2', _0: 1, _1: 0}),
						_1: {ctor: '[]'}
					}
				},
				fruit: {ctor: '_Tuple2', _0: 13, _1: 13},
				seed: _elm_lang$core$Random$initialSeed(s),
				cpu: b,
				state: _user$project$Model$Playing
			});
	});
